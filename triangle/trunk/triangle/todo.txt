TODO
====

Open
----

- Label and other texts should be configurable and externalizable in a properties file:
	- If Label annotation exists, check the properties file for a localized translation with key = Label.value()
	- If no Label annotation exists, check the properties file for a localized translation with the following keys:
		- for label: (label.)(<classname>.)<fieldname>
		- for validation: validation.(<validator>.)(<classname>.)<fieldname>
		- if no property found, use label = <fieldname>, validation = generic message for fieldname
	- Similar approach can be done for help texts, descriptions, table columns etc.
- Annotation for display order
- Conversion, especially of numeric values seems to be a bit strange. Try a better implementation.
- Persistence layer with basic CRUD, sort and filter functionality.
    - Pluggable
    - GAE / Objectify implementation
    - Hibernate / JPA implementation
- Permissions for each CRUD function with user roles
- Pluggable UI options (Stripes based, Basic UI components e.g. List, Form - customizable)
- UI flow
- Pluggable user system
- Establish request lifecycle: 
    1) submit 
    2) convert 
    3) validate 
    4) business logic 
    5) persist 
    6) business logic 
    7) load 
    8) format 
    9) display
- Standard application pages for each type:
    - List (with options: sort, filter, delete, create; link to: edit, detail = edit readonly) 
    - Edit
    - Detail (= Edit readonly)
- Establish application lifecycle:
    1) Start page is either List of main entity (if defined) or overview of all entities.
    2) List page
    3) Detail page
- errors during 2) convert to be similarly treated as 3) validate errors.
- Improve validate error handling:
    - Logging must be very clear (entity type, instance, field validator type)
    - Replace ValidationException with error class containing all information
- Datamodel should include:
    - Relations to other entities (reference n:m, like: select list)
    - Child entities (reference 1:n, can be created from within parent entity detail page)

Closed
------
- Use generics more consequently (e.g. Entity<E>, Attribute<E, A> (E for the Entity type, A for the Attribute type)
- Custom ConverterType and FormatterType
- Single annotation for converter, similar to @Validate
- Single class for Converter and Formatter --> Converter
- Converter / Formatter